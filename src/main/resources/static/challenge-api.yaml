openapi: 3.0.0

info:
  version: 0.0.1
  title: Reba Challenge
  description: Interview challenge for "Java fullstack developer" position at Reba

tags:
  - name: "Persons"
  - name: "Documents"
  - name: "Addresses"
  - name: "Phones"
  - name: "Stats"

paths:
  /api/personas:
    get:
      summary: gets all persons
      tags:
        - "Persons"
      description: Gets all persons
      operationId: getAllPersons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      requestBody:
        description: Person to be added
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Person'
      summary: Adds a persons
      tags:
        - "Persons"
      description: Adds a persons
      operationId: postPerson
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request
  /api/personas/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: the person identifier, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets person by id
      tags:
        - "Persons"
      description: Gets a person by it's id
      operationId: getPersonById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "404":
          description: Not Found
    delete:
      summary: delete person by id
      tags:
        - "Persons"
      description: Performs a logic delete of a person by it's id
      operationId: deletePersonById
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    put:
      summary: update person by id
      tags:
        - "Persons"
      description: Updates a person by it's id
      operationId: updatePersonById
      requestBody:
        description: Put payload
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request
  /api/personas/{parentId}/padre/{childId}:
    parameters:
      - in: path
        name: parentId
        required: true
        description: the parent identifier, as parentId
        schema:
          type: integer
          format: int64
      - in: path
        name: childId
        required: true
        description: the child identifier, as childId
        schema:
          type: integer
          format: int64
    post:
      summary: sets parentId as a parent of childId
      tags:
        - "Persons"
      description: Sets a parent relation between two persons
      operationId: setParentRelation
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
  /api/personas/{userId}/hijos:
    parameters:
      - in: path
        name: userId
        required: true
        description: the parent identifie, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets parent and children
      tags:
        - "Persons"
      description: Gets Parent and it's Children
      operationId: getParentRelation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentRelation'
        "404":
          description: Not Found
  /api/personas/{userId}/document:
    parameters:
      - name: userId
        in: path
        required: true
        description: the person identifier, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets document by userId
      tags:
        - "Persons"
      description: Gets a document by userIid
      operationId: getDocumentByUserId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        "404":
          description: Not Found
  /api/personas/{userId}/phone:
    parameters:
      - name: userId
        in: path
        required: true
        description: the person identifier, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets phone by userId
      tags:
        - "Persons"
      description: Gets a phone by userIid
      operationId: getPhoneByUserId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
        "404":
          description: Not Found
  /api/personas/{userId}/address:
    parameters:
      - name: userId
        in: path
        required: true
        description: the person identifier, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets address by userId
      tags:
        - "Persons"
      description: Gets an address by userIid
      operationId: getAddressByUserId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "404":
          description: Not Found
  /api/documents:
    get:
      summary: gets all documents
      tags:
        - "Documents"
      description: Gets all Documents
      operationId: getDocuments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
  /api/documents/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        description: the document identifier, as documentId
        schema:
          type: integer
          format: int64
    get:
      summary: gets document by documentId
      tags:
        - "Documents"
      description: Gets a document by it's document id
      operationId: getDocumentById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        "404":
          description: Not Found
  /api/phones:
    get:
      summary: gets all phones
      tags:
        - "Phones"
      description: Gets all phones
      operationId: getPhones
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Phone'
  /api/phones/{phoneId}:
    parameters:
      - name: phoneId
        in: path
        required: true
        description: the phone identifier, as phoneId
        schema:
          type: integer
          format: int64
    get:
      summary: gets phone by phoneId
      tags:
        - "Phones"
      description: Gets a phone by it's phone id
      operationId: getPhoneById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
        "404":
          description: Not Found
  /api/addresses:
    get:
      summary: gets all addresses
      tags:
        - "Addresses"
      description: Gets all addresses
      operationId: getAddresses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
  /api/addresses/{addressId}:
    parameters:
      - name: addressId
        in: path
        required: true
        description: the address identifier, as addressId
        schema:
          type: integer
          format: int64
    get:
      summary: gets address by addressId
      tags:
        - "Addresses"
      description: Gets an address by it's address id
      operationId: getAddressById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "404":
          description: Not Found
  /api/relaciones/{userId1}/{userId2}:
    parameters:
      - in: path
        name: userId1
        required: true
        description: the first user identifier, as userId1
        schema:
          type: integer
          format: int64
      - in: path
        name: userId2
        required: true
        description: the second user identifier, as userId2
        schema:
          type: integer
          format: int64
    get:
      summary: relation of the two users
      tags:
        - "Persons"
      description: Returns the relation of the two users
      operationId: getRelationBetween
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelativeRelationDTO'
        "404":
          description: Not Found
  /api/stats:
    get:
      summary: gets api stats
      tags:
        - "Stats"
      description: Gets an array of a country and the percentage of users from that country
      operationId: getStats
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountryStatsDTO'
components:
  schemas:
    Person:
      description: Person DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        birthdate:
          type: string
        document:
          $ref: '#/components/schemas/Document'
        phone:
          $ref: '#/components/schemas/Phone'
        address:
          $ref: '#/components/schemas/Address'
    Document:
      description: Document DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        document:
          type: string
        residence-country:
          type: string
    Address:
      description: Adddress DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        street:
          type: string
        number:
          type: string
        appartment:
          type: boolean
    Phone:
      description: Phone DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
    ParentRelation:
      description: Parent and it's children
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/Person'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    RelativeRelationDTO:
      description: the two persons and it's relation
      type: object
      properties:
        person1:
          $ref: '#/components/schemas/Person'
        person2:
          $ref: '#/components/schemas/Person'
        relation:
          type: string
    CountryStatsDTO:
      description: Country name and percetange of users from that country
      type: object
      properties:
        Country:
          type: string
        percentage:
          type: number
          format: double