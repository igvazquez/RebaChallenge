openapi: 3.0.0

info:
  version: 0.0.1
  title: Reba Challenge
  description: Interview challenge for "Java fullstack developer" position at Reba

tags:
  - name: "Persons"
  - name: "Documents"

paths:
  /api/personas:
    get:
      summary: gets all persons
      tags:
        - "Persons"
      description: Gets all persons
      operationId: getAllPersons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      requestBody:
        description: Person to be added
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Person'
      summary: Adds a persons
      tags:
        - "Persons"
      description: Adds a persons
      operationId: postPerson
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
  /api/personas/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: the person identifier, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets person by id
      tags:
        - "Persons"
      description: Gets a person by it's id
      operationId: getPersonById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    delete:
      summary: delete person by id
      tags:
        - "Persons"
      description: Performs a logic delete of a person by it's id
      operationId: deletePersonById
      responses:
        "204":
          description: No Content
    put:
      summary: update person by id
      tags:
        - "Persons"
      description: Updates a person by it's id
      operationId: updatePersonById
      requestBody:
        description: Put payload
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
  /api/personas/{parentId}/padre/{childId}:
    parameters:
      - in: path
        name: parentId
        required: true
        description: the parent identifier, as parentId
        schema:
          type: integer
          format: int64
      - in: path
        name: childId
        required: true
        description: the child identifier, as childId
        schema:
          type: integer
          format: int64
    post:
      summary: sets parentId as a parent of childId
      tags:
        - "Persons"
      description: Sets a parent relation between two persons
      operationId: setParentRelation
      responses:
        "201":
          description: Created
  /api/personas/{userId}/hijos:
    parameters:
      - in: path
        name: userId
        required: true
        description: the parent identifie, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets parent and children
      tags:
        - "Persons"
      description: Gets Parent and it's Children
      operationId: getParentRelation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentRelation'
  /api/personas/{userId}/document:
    parameters:
      - name: userId
        in: path
        required: true
        description: the person identifier, as userId
        schema:
          type: integer
          format: int64
    get:
      summary: gets document by userId
      tags:
        - "Persons"
      description: Gets a document by userIid
      operationId: getDocumentByUserId
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
  /api/documents:
    get:
      summary: gets all documents
      tags:
        - "Documents"
      description: Gets all Documents
      operationId: getDocuments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
  /api/documents/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        description: the document identifier, as documentId
        schema:
          type: integer
          format: int64
    get:
      summary: gets document by documentId
      tags:
        - "Documents"
      description: Gets a document by it's document id
      operationId: getDocumentById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
components:
  schemas:
    Person:
      description: Person DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        birthdate:
          type: string
        document:
          $ref: '#/components/schemas/Document'
    Document:
      description: Document DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        document:
          type: string
        residence-country:
          type: string
    ParentRelation:
      description: Parent and it's children
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/Person'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Person'